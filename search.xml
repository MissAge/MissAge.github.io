<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springboot2.x在tomcat8上部署的问题</title>
      <link href="/2021/06/22/springboot2-x%E5%9C%A8tomcat8%E4%B8%8A%E9%83%A8%E7%BD%B2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2021/06/22/springboot2-x%E5%9C%A8tomcat8%E4%B8%8A%E9%83%A8%E7%BD%B2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>最近公司在实行国产化开发, 项目部署用的是东方通(TongWeb)这个服务中间件, 这是一个基于tomcat开发的服务器.提供给我们使用的版本是基于tomcat8开发的, 比较老旧, 不出意外, 部署的时候报错了, 错误如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">ERROR 20324 --- [http-nio-8080-exec-4] o.s.b.w.servlet.support.ErrorPageFilter  : Forwarding to error page from request [/swagger-resources] due to exception [Filter 执行抛出一个异常]</span><br><span class="line"></span><br><span class="line">javax.servlet.ServletException: Filter 执行抛出一个异常</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:201)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:167)</span><br><span class="line">at com.citygis.business.core.filter.ValidationFilter.doFilterInternal(ValidationFilter.java:91)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:194)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:167)</span><br><span class="line">at com.citygis.business.core.filter.JwtAuthenticationTokenFilter.doFilterInternal(JwtAuthenticationTokenFilter.java:62)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:194)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:167)</span><br><span class="line">at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:124)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:194)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:167)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:204)</span><br><span class="line">at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)</span><br><span class="line">at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)</span><br><span class="line">at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:194)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:167)</span><br><span class="line">at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:194)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:167)</span><br><span class="line">at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:194)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:167)</span><br><span class="line">at org.springframework.boot.web.servlet.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:126)</span><br><span class="line">at org.springframework.boot.web.servlet.support.ErrorPageFilter.access$000(ErrorPageFilter.java:64)</span><br><span class="line">at org.springframework.boot.web.servlet.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:101)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class="line">at org.springframework.boot.web.servlet.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:119)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:194)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:167)</span><br><span class="line">at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:194)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:167)</span><br><span class="line">at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)</span><br><span class="line">at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)</span><br><span class="line">at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:544)</span><br><span class="line">at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:143)</span><br><span class="line">at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:81)</span><br><span class="line">at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:698)</span><br><span class="line">at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)</span><br><span class="line">at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:364)</span><br><span class="line">at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:624)</span><br><span class="line">at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)</span><br><span class="line">at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:831)</span><br><span class="line">at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1651)</span><br><span class="line">at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Caused by: java.lang.NoSuchMethodError: javax.servlet.http.HttpServletRequest.getHttpServletMapping()Ljavax/servlet/http/HttpServletMapping;</span><br><span class="line">at org.springframework.web.util.UrlPathHelper.skipServletPathDetermination(UrlPathHelper.java:265)</span><br><span class="line">at org.springframework.web.util.UrlPathHelper.getLookupPathForRequest(UrlPathHelper.java:250)</span><br><span class="line">at org.springframework.web.cors.UrlBasedCorsConfigurationSource.resolvePath(UrlBasedCorsConfigurationSource.java:260)</span><br><span class="line">at org.springframework.web.cors.UrlBasedCorsConfigurationSource.getCorsConfiguration(UrlBasedCorsConfigurationSource.java:244)</span><br><span class="line">at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:86)</span><br><span class="line">at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)</span><br><span class="line">at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:194)</span><br><span class="line">... 54 common frames omitted</span><br></pre></td></tr></table></figure><a id="more"></a><p>在使用tomcat9部署的时候并没有出现这个问题, 考虑是springboot版本和tomcat版本不对应导致的</p><p>解决办法: 去掉springboot自带的tomcat依赖并改为由tomcat容器提供(不然本地启动会由于没有容器而报错), 添加servlet依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;exclusions&gt;</span><br><span class="line">        &lt;exclusion&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">        &lt;/exclusion&gt;</span><br><span class="line">    &lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>依赖中的scope属性设置为provided表示只在项目编译时提供此依赖, 并不会被打包, 由特定容器提供</p>]]></content>
      
      
      <categories>
          
          <category> develop record </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下安装和卸载plsql</title>
      <link href="/2021/05/24/Linux%E4%B8%8B%E5%AE%89%E8%A3%85postgresql/"/>
      <url>/2021/05/24/Linux%E4%B8%8B%E5%AE%89%E8%A3%85postgresql/</url>
      
        <content type="html"><![CDATA[<p>首先在VMWare安装CentOS7, 参考此篇文章</p><p><code>https://blog.csdn.net/babyxue/article/details/80970526</code></p><h4 id="卸载plsql"><a href="#卸载plsql" class="headerlink" title="卸载plsql"></a>卸载plsql</h4><p>输入: <code>yum remove postgresql*</code> 系统自动执行删除操作</p><h4 id="安装plsql"><a href="#安装plsql" class="headerlink" title="安装plsql"></a>安装plsql</h4><p>到plsql官网: <a href="https://www.postgresql.org/" target="_blank" rel="noopener">https://www.postgresql.org/</a>  点击下载, 选择对应的系统和版本, 如图</p><a id="more"></a><p><img src="/images/test.png" alt="test.png"></p><p>选择完后会出现官方给的安装命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line">sudo yum install -y postgresql13-server</span><br><span class="line">sudo /usr/pgsql-13/bin/postgresql-13-setup initdb</span><br><span class="line">sudo systemctl enable postgresql-13</span><br><span class="line">sudo systemctl start postgresql-13</span><br></pre></td></tr></table></figure><p>执行initdb的时候可能会遇到如下问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/pgsql-13/bin/postgresql-13-setup initdb</span><br><span class="line">Data directory is not empty!</span><br></pre></td></tr></table></figure><p>这是因为卸载时没有卸载干净, 我们进入/var/lib目录下删除文件夹pgsql就可以了</p><p>参考: <a href="https://blog.csdn.net/shirenkan/article/details/100903000" target="_blank" rel="noopener">https://blog.csdn.net/shirenkan/article/details/100903000</a></p><h4 id="plsql配置"><a href="#plsql配置" class="headerlink" title="plsql配置"></a>plsql配置</h4><p>修改配置文件postgresql.conf – 允许远程访问</p><p>位置：/var/lib/pgsql/13/data/postgresql.conf<br>修改：使用vim打开配置文件, 使用/ + 关键字在编辑器中快速定位到listen(可以按N键查找下一个), 取消#注释或者新增一条 listen_addresses = ‘*’ 表示允许所有ip访问</p><p>修改配置文件pg_hba.conf – 访问规则</p><p>位置：/var/lib/pgsql/13/data/pg_hba.conf</p><p>在IPv4 local connections:新增如下内容。其中192.168.0.0/16 代表192.168.1.1到192.168.255.255都可以访问, 如果写成192.168.122.0/24，代表192.168.122.1到192.168.122.255都可以访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class="line">local   all             all                                     peer</span><br><span class="line"># IPv4 local connections:</span><br><span class="line">host    all             all             127.0.0.1/32            scram-sha-256</span><br><span class="line"># 访问规则修改 允许所有端口连接</span><br><span class="line">host    all             all             0.0.0.0/0               scram-sha-256</span><br><span class="line"># IPv6 local connections:</span><br><span class="line">host    all             all             ::1/128                 scram-sha-256</span><br><span class="line"># Allow replication connections from localhost, by a user with the</span><br></pre></td></tr></table></figure><p>修改过后重启服务: <code>systemctl restart postgresql-13.service</code></p>]]></content>
      
      
      <categories>
          
          <category> database </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>换电脑后博客迁移</title>
      <link href="/2021/05/24/%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
      <url>/2021/05/24/%E6%8D%A2%E7%94%B5%E8%84%91%E5%90%8E%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="得到博客文件夹"><a href="#得到博客文件夹" class="headerlink" title="得到博客文件夹"></a>得到博客文件夹</h4><p>文件可以从github上clone也可以从原电脑备份</p><p>建立hexo博客都会有一个独立的文件夹。电脑转移时安全的做法是将整个文件夹拷贝，这其中包括三个必备的文件：config.yml（站点配置_）、theme（主题文件夹）、source（博客内容文件）。次要文件：scaffolds（文章的模板）、package.json（使用包的说明文件）和.gitignore（限定在提交的时候哪些文件可以忽略）三个次要文件为自动生成的，因此丢失也不影响博客内容，后续在hexo init时会生成这三个文件。需要删除的文件：.git文件、node_modules（进行npm install会重新生成）、public（执行hexo g时会重新生成）、.deploy_git文件夹（执行hexo d时会重新生成）、db.json文件。其实上面这些可删除的文件即为.gitignore文件里面记载的可以忽略的内容。</p><a id="more"></a><h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><p>首先安装hexo</p><p>使用命令 <code>npm install -g hexo-cli</code></p><p>由于我们已经有了原博客的文件所以 <span style="color:red">不用执行 hexo init &lt;博客文件夹&gt;</span> 否则会初始化你原本博客的个性化设置</p><p>直接开始安装博客需要的一些组件</p><p>执行npm install,可能会出现两个警告, 不必理会</p><p>到这一步我们已经安装完成了, 接下来需要和我们的github仓库联系起来以便推送</p><h4 id="使用SSH-Key关联Github仓库"><a href="#使用SSH-Key关联Github仓库" class="headerlink" title="使用SSH Key关联Github仓库"></a>使用SSH Key关联Github仓库</h4><p>如果还能找到以前使用的ssh key, 那可以把原来的key文件复制到新电脑继续使用 key文件夹.ssh一般在C盘的用户目录下</p><p>找不回的话就需要新生成key文件, 使用命令: <code>ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;</code>来生成新的ssh key文件</p><p>接下来会出现如下提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/C/Users/Night/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>直接回车, 使用默认路径就好</p><p>接下来会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure><p>要求你输入密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p><p>注意：输入密码的时候没有*字样的，直接输入就好。<br>然后会显示关于新生成key的一些信息, 到此ssh key生成完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Your identification has been saved in /C/Users/Night/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /C/Users/Night/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">65:58:······02:4b emailname@email.com</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|       .   o .   |</span><br><span class="line">|    . o o = o    |</span><br><span class="line">|   . o * = o     |</span><br><span class="line">|  E  o + o .     |</span><br><span class="line">| . o.   . .      |</span><br><span class="line">|     ..          |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure><h4 id="在Github添加SSH-Key"><a href="#在Github添加SSH-Key" class="headerlink" title="在Github添加SSH Key"></a>在Github添加SSH Key</h4><p>登录github, 在个人头像处点击设置, 然后找到SSH and GPG keys, 点击新建SSH Key</p><p>找到我们刚才生成的key文件夹, 用编辑器打开id_rsa.pub文件并复制全部内容</p><p>将复制的内容粘贴到新建框内, title可以随便写, 然后点击保存</p><p>测试一下是否添加成功: ssh -T github用户名@github.com</p><p>有可能会出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (192.168.***.111)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is 36:27:ac:a5:76:28:2d:45:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>或者是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;github.com (192.168.***.111)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is nThbg***********************8.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>这种情况下，直接 yes 回车。</p><p>然后会出现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h4 id="设置Git用户信息"><a href="#设置Git用户信息" class="headerlink" title="设置Git用户信息"></a>设置Git用户信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;用户名&quot;</span><br><span class="line">$ git config --global user.email  &quot;邮箱&quot;</span><br></pre></td></tr></table></figure><p>到此迁移完成, 继续愉快的学习吧</p><p>原文连接: <code>https://blog.csdn.net/qq_34187711/article/details/88592760</code></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客迁移 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记</title>
      <link href="/2019/09/20/%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/09/20/%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="关于Ueditor"><a href="#关于Ueditor" class="headerlink" title="关于Ueditor:"></a>关于Ueditor:</h4><p>​    Ueditor在初始化时会先发送一次请求来获取config.json这个配置文件, 请求路径在ueditor.config.js中, 这个路径可以根据自己的需要自定义, 一般为: ip:port/ueditor/jsp/config.json。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 配置项主体。注意，此处所有涉及到路径的配置别遗漏URL变量。</span><br><span class="line">    */</span><br><span class="line">   window.UEDITOR_CONFIG = &#123;</span><br><span class="line"></span><br><span class="line">       //为编辑器实例添加一个路径，这个不能被注释</span><br><span class="line">       UEDITOR_HOME_URL: URL</span><br><span class="line"></span><br><span class="line">       // 服务器统一请求接口路径</span><br><span class="line">       , serverUrl: &quot;/upload/config&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><p>​    但是如果是前后端分离项目中涉及到跨域问题, ueditor使用的是jsonp, 这时如果从后台请求json文件就会出问题, 因为json和jsonp格式是不一样的, 我的处理办法是请求config.json文件时直接在前台获取, 第二次请求上传时才会请求后台, 这就需要自己定义图片的上传路径。</p><p>​    后台代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@RequestMapping(&quot;upload&quot;)</span><br><span class="line">public void upload(HttpServletResponse response, String action, MultipartFile upfile) throws IOException &#123;</span><br><span class="line">//action为发送请求是附带的动作表示请求的类型是什么</span><br><span class="line">    if (action.equals(&quot;config&quot;)) &#123;</span><br><span class="line">        response.sendRedirect(&quot;/ueditor/jsp/config.json&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        System.out.println(&quot;file = &quot; + upfile);</span><br><span class="line">        if (upfile == null) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        String filePath = QiNiuFilesUtil.uploadFilesQinu(upfile);</span><br><span class="line">        System.out.println(&quot;filePath = &quot; + filePath);</span><br><span class="line">        //ueditor要求返回格式</span><br><span class="line">        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        //state成功必须返回SUCCESS</span><br><span class="line">        map.put(&quot;state&quot;, &quot;SUCCESS&quot;);</span><br><span class="line">        //图片地址，/ueditor/jsp/config.json配置中配置的图片前缀为&quot;http://&quot;,所以这里返回完成地址</span><br><span class="line">        map.put(&quot;url&quot;, filePath);</span><br><span class="line">        //返回json</span><br><span class="line">        response.setCharacterEncoding(&quot;UTF-8&quot;);</span><br><span class="line">        response.setContentType(&quot;application/json; charset=utf-8&quot;);</span><br><span class="line">        response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span><br><span class="line">        PrintWriter out = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            out = response.getWriter();</span><br><span class="line">            out.append(JSON.toJSONString(map));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (out != null) &#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ueditor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud学习笔记</title>
      <link href="/2019/09/17/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/09/17/SpringCloud%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>一个微服务有多个提供者时, 实例名称instance-id不能重复, 否则在eureka服务器上只显示一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  client:</span><br><span class="line">    service-url:</span><br><span class="line">      defaultZone: http://eureka.com:7001/eureka, http://eureka1.com:7002/eureka, http://eureka2.com:7003/eureka</span><br><span class="line">  instance:</span><br><span class="line">    instance-id: cloud-provider</span><br><span class="line">    prefer-ip-address: true</span><br></pre></td></tr></table></figure><a id="more"></a><p>Thread.yield();方法可以让当前线程让出CPU的时间片, 使此正在运行的线程变成就绪状态, 并重新与其他等待中的线程竞争CPU的调度权(<span style="color:red">注意不是放弃CPU调度, 而是参与竞争, 有可能刚让掉又立马获取到执行权继续运行</span>)。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java分布式与集群的区别和联系</title>
      <link href="/2018/11/20/Java%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%9B%86%E7%BE%A4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/"/>
      <url>/2018/11/20/Java%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%8E%E9%9B%86%E7%BE%A4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%81%94%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<p>原文链接:<a href="http://www.cnblogs.com/wangyayun/p/6405425.html" target="_blank" rel="noopener">http://www.cnblogs.com/wangyayun/p/6405425.html</a></p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>一句话：分布式是并联工作的，集群是串联工作的。</p><h4 id="分布式是指将不同的业务分布在不同的地方。-而集群指的是将几台服务器集中在一起，实现同一业务。"><a href="#分布式是指将不同的业务分布在不同的地方。-而集群指的是将几台服务器集中在一起，实现同一业务。" class="headerlink" title="分布式是指将不同的业务分布在不同的地方。 而集群指的是将几台服务器集中在一起，实现同一业务。"></a>分布式是指将不同的业务分布在不同的地方。 而集群指的是将几台服务器集中在一起，实现同一业务。</h4><p>分布式中的每一个节点，都可以做集群。 而集群并不一定就是分布式的。</p><a id="more"></a><p>举例：就比如新浪网，访问的人多了，他可以做一个群集，前面放一个响应服务器，后面几台服务器完成同一业务，如果有业务访问的时候，响应服务器看哪台服务器的负载不是很重，就将给哪一台去完成。</p><p>而分布式，从窄意上理解，也跟集群差不多， 但是它的组织比较松散，不像集群，有一个组织性，一台服务器垮了，其它的服务器可以顶上来。</p><p>分布式的每一个节点，都完成不同的业务，一个节点垮了，那这个业务就不可访问了。</p><h4 id="简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。"><a href="#简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。" class="headerlink" title="简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。"></a>简单说，分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。</h4><p>简单的例子说明一下：</p><p>如果一个任务由10个子任务组成，每个子任务单独执行需1小时，则在一台服务器上执行该任务需10小时。</p><p>采用分布式方案，提供10台服务器，每台服务器只负责处理一个子任务，不考虑子任务间的依赖关系，执行完这个任务只需一个小时。(这种工作模式的一个典型代表就是Hadoop的Map/Reduce分布式计算模型）</p><p>而采用集群方案，同样提供10台服务器，每台服务器都能独立处理这个任务。假设有10个任务同时到达，10个服务器将同时工作，1小时后，10个任务同时完成，这样，整身来看，还是1小时内完成一个任务！</p><h3 id="集群概念"><a href="#集群概念" class="headerlink" title="集群概念"></a>集群概念</h3><h4 id="两大关键特性"><a href="#两大关键特性" class="headerlink" title="两大关键特性"></a>两大关键特性</h4><p>集群是一组协同工作的服务实体，用以提供比单一服务实体更具扩展性与可用性的服务平台。在客户端看来，一个集群就象是一个服务实体，但事实上集群由一组服务实体组成。与单一服务实体相比较，集群提供了以下两个关键特性：</p><p><strong>1.可扩展性：</strong>集群的性能不限于单一的服务实体，新的服务实体可以动态地加入到集群，从而增强集群的性能。</p><p><strong>2.高可用性：</strong>集群通过服务实体冗余使客户端免于轻易遇到out of service的警告。在集群中，同样的服务可以由多个服务实体提供。如果一个服务实体失败了，另一个服务实体会接管失败的服务实体。集群提供的从一个出 错的服务实体恢复到另一个服务实体的功能增强了应用的可用性。</p><h4 id="两大能力"><a href="#两大能力" class="headerlink" title="两大能力"></a>两大能力</h4><p>为了具有可扩展性和高可用性特点，集群的必须具备以下两大能力：</p><p><strong>1.负载均衡：</strong>负载均衡能把任务比较均衡地分布到集群环境下的计算和网络资源。</p><p><strong>2.错误恢复：</strong>由于某种原因，执行某个任务的资源出现故障，另一服务实体中执行同一任务的资源接着完成任务。这种由于一个实体中的资源不能工作，另一个实体中的资源透明的继续完成任务的过程叫错误恢复。</p><p>负载均衡和错误恢复都要求各服务实体中有执行同一任务的资源存在，而且对于同一任务的各个资源来说，执行任务所需的信息视图（信息上下文）必须是一样的。</p><h4 id="两大技术"><a href="#两大技术" class="headerlink" title="两大技术"></a>两大技术</h4><p>实现集群务必要有以下两大技术：</p><p><strong>1.集群地址：</strong>集群由多个服务实体组成，集群客户端通过访问集群的集群地址获取集群内部各服务实体的功能。具有单一集群地址（也叫单一影像）是集群的一个基 本特征。维护集群地址的设置被称为负载均衡器。负载均衡器内部负责管理各个服务实体的加入和退出，外部负责集群地址向内部服务实体地址的转换。有的负载均 衡器实现真正的负载均衡算法，有的只支持任务的转换。只实现任务转换的负载均衡器适用于支持ACTIVE-STANDBY的集群环境，在那里，集群中只有 一个服务实体工作，当正在工作的服务实体发生故障时，负载均衡器把后来的任务转向另外一个服务实体。</p><p><strong>2.内部通信：</strong>为了能协同工作、实现负载均衡和错误恢复，集群各实体间必须时常通信，比如负载均衡器对服务实体心跳测试信息、服务实体间任务执行上下文信息的通信。</p><p>具有同一个集群地址使得客户端能访问集群提供的计算服务，一个集群地址下隐藏了各个服务实体的内部地址，使得客户要求的计算服务能在各个服务实体之间分布。内部通信是集群能正常运转的基础，它使得集群具有均衡负载和错误恢复的能力。</p><h3 id="集群分类"><a href="#集群分类" class="headerlink" title="集群分类"></a>集群分类</h3><p>Linux集群主要分成三大类( 高可用集群， 负载均衡集群，科学计算集群)</p><h4 id="高可用集群-High-Availability-Cluster"><a href="#高可用集群-High-Availability-Cluster" class="headerlink" title="高可用集群(High Availability Cluster)"></a>高可用集群(High Availability Cluster)</h4><p>常见的就是2个节点做成的HA集群，有很多通俗的不科学的名称，比如”双机热备”, “双机互备”, “双机”.</p><p>高可用集群解决的是保障用户的应用程序持续对外提供服务的能力。 (请注意高可用集群既不是用来保护业务数据的，保护的是用户的业务程序对外不间断提供服务，把因软件/硬件/人为造成的故障对业务的影响降低到最小程度)。</p><h4 id="负载均衡集群-Load-Balance-Cluster"><a href="#负载均衡集群-Load-Balance-Cluster" class="headerlink" title="负载均衡集群(Load Balance Cluster)"></a>负载均衡集群(Load Balance Cluster)</h4><p>负载均衡系统：集群中所有的节点都处于活动状态，它们分摊系统的工作负载。一般Web服务器集群、数据库集群和应用服务器集群都属于这种类型。</p><p>负载均衡集群一般用于相应网络请求的网页服务器，数据库服务器。这种集群可以在接到请求时，检查接受请求较少，不繁忙的服务器，并把请求转到这些服务器上。从检查其他服务器状态这一点上看，负载均衡和容错集群很接近，不同之处是数量上更多。</p><h4 id="科学计算集群-High-Performance-Computing-Cluster"><a href="#科学计算集群-High-Performance-Computing-Cluster" class="headerlink" title="科学计算集群(High Performance Computing Cluster)"></a>科学计算集群(High Performance Computing Cluster)</h4><p>高性能计算(High Perfermance Computing)集群，简称HPC集群。这类集群致力于提供单个计算机所不能提供的强大的计算能力。</p><h3 id="分布式（集群）与集群的联系与区别"><a href="#分布式（集群）与集群的联系与区别" class="headerlink" title="分布式（集群）与集群的联系与区别"></a>分布式（集群）与集群的联系与区别</h3><p><strong>分布式是指将不同的业务分布在不同的地方。</strong></p><p><strong>而集群指的是将几台服务器集中在一起，实现同一业务。</strong></p><p><strong>分布式中的每一个节点，都可以做集群。</strong></p><p><strong>而集群并不一定就是分布式的。</strong></p><p>举例：就比如新浪网，访问的人多了，他可以做一个群集，前面放一个响应服务器，后面几台服务器完成同一业务，如果有业务访问的时候，响应服务器看哪台服务器的负载不是很重，就将给哪一台去完成。</p><p>而分布式，从窄意上理解，也跟集群差不多， 但是它的组织比较松散，不像集群，有一个组织性，一台服务器垮了，其它的服务器可以顶上来。</p><p>分布式的每一个节点，都完成不同的业务，一个节点垮了，哪这个业务就不可访问了。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welcome To WhiteAlbum_Night</title>
      <link href="/2018/11/09/Welcome/"/>
      <url>/2018/11/09/Welcome/</url>
      
        <content type="html"><![CDATA[<h4 id="你好啊，今天也是充满希望的一天！"><a href="#你好啊，今天也是充满希望的一天！" class="headerlink" title="你好啊，今天也是充满希望的一天！"></a>你好啊，今天也是充满希望的一天！</h4>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> welcome </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
